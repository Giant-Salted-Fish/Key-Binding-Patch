// See https://gitlab.com/gofancy/fancygradle
plugins {
	id 'maven-publish'
	id 'net.minecraftforge.gradle' version '5.1.+'
	id 'wtf.gofancy.fancygradle' version '1.1.+'
	id 'org.spongepowered.mixin' version '0.7.+'
}

version = '1.12.2-1.2.0.2'
group = 'com.kbp'  // See http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'Key Binding Patch'

// Need this here to correctly generate the Eclipse task.
java.toolchain.languageVersion = JavaLanguageVersion.of(8)
// sourceCompatibility = targetCompatibility = '1.8'
// compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
	// The mappings can be changed at any time, and must be in the following format.
	// snapshot_YYYYMMDD   Snapshot are built nightly.
	// stable_#			Stables are built at the discretion of the MCP team.
	// Use non-default mappings at your own risk. they may not always work.
	// Simply re-run your setup task after changing the mappings to update your workspace.
	mappings channel: 'stable', version: '39-1.12'
//	makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

//	accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

	// Default run configurations.
	// These can be tweaked, removed, or duplicated as needed.
	runs {
		client {
			workingDirectory project.file('run')

			// Recommended logging data for a userdev environment.
			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
			
			// Recommended logging level for the console.
			property 'forge.logging.console.level', 'debug'

			// Mixin settings, see https://mouse0w0.github.io/2022/03/01/Mixin-Java-System-Properties/.
			property 'mixin.hotSwap', "true"
		}
		
		server {
			// Recommended logging data for a userdev environment.
			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
			
			// Recommended logging level for the console.
			property 'forge.logging.console.level', 'debug'

			property 'mixin.hotSwap', "true"
		}
	}
}

repositories {
	maven {
		name 'Cleanroom'
		url 'https://maven.cleanroommc.com'
	}
}

dependencies {
	// Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
	// that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
	// The userdev artifact is a special name and will get all sorts of transformations applied to it.
	minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'
	annotationProcessor 'org.ow2.asm:asm-debug-all:5.2'

	// Apply Mixin AP.
	implementation ('zone.rong:mixinbooter:9.1') {
		transitive = false
	}
	annotationProcessor ('zone.rong:mixinbooter:9.1') {
		transitive = false
	}

	// You may put jars on which you depend on in ./libs or you may define them like so..
//	compile "some.group:artifact:version:classifier"
//	compile "some.group:artifact:version"

	// Real examples
//	compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
//	compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

	// The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
//	provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

	// These dependencies get remapped to your current MCP mappings
//	deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

	// For more info...
	// http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
	// http://www.gradle.org/docs/current/userguide/dependency_management.html
}

mixin {
	// MixinGradle Settings.
	// See https://github.com/SpongePowered/Mixin/wiki/Mixins-on-Minecraft-Forge
	add sourceSets.main, 'mixins.kbp.refmap.json'
//	config 'mixins.kbp.json'

//	debug.verbose = true
//	debug.export = true
//	dumpTargetOnFailure = true
}

javadoc {
	exclude('**/mixin/**')
}

// Example for how to get properties into the manifest for reading by the runtime.
jar {
	manifest {
		attributes([
			"FMLCorePlugin": "com.kbp.client.EarlyMixinInit",
			"FMLCorePluginContainsFMLMod": true,
			"Specification-Title": project.name,
			"Specification-Vendor": "Giant_Salted_Fish",
			"Specification-Version": "1",  // We are version 1 of ourselves
			"Implementation-Title": project.name,
			"Implementation-Version": project.version,
			"Implementation-Vendor": "Giant_Salted_Fish",
			"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
		])
	}
}

// Example configuration to allow publishing using the maven-publish task.
// This is the preferred method to reobfuscate your jar file.
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing.
//publish.dependsOn('reobfJar')

// Add tasks to generate source and Javadoc JARs
tasks.register('sourceJar', Jar) {
	from sourceSets.main.allSource
	archiveClassifier.set('sources')
}

tasks.register('javadocJar', Jar) {
	dependsOn javadoc
	from javadoc.destinationDir
	archiveClassifier.set('javadoc')
}

// Include the source and Javadoc JARs in the publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact jar
			artifact sourceJar
			artifact javadocJar
		}
	}
	repositories {
		maven {
			url "file:///${project.projectDir}/mcmodsrepo"
		}
	}
}

fancyGradle {
	patches {
		resources
		coremods
//		codeChickenLib
		asm
		mergetool
	}
}
